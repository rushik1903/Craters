// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel ComputePlanetHeight


RWStructuredBuffer<float3> vertices;
RWStructuredBuffer<float> heights;
RWStructuredBuffer<float3> craterCentres;
RWStructuredBuffer<float> craterRadii;
RWStructuredBuffer<float> craterDepth;


float planetRadius;
uint numCraters;
uint numVertices;
float smoothness;
float rimWidth;//between 0-1
float rimHeight;//between 0-1

float Clamp01(int a){
    if(a>1){return 1;}
    if(a<0){return 0;}
    return a;
}

float SmoothMin(float a, float b, float k){
    float h = Clamp01((b-a+k) / (2*k));
    return a*h+b*(1-h) - k*h *(1-h);
}

float SmoothMax(float a, float b, float k){
    k=-k;
    float h = Clamp01((b-a+k) / (2*k));
    return a*h+b*(1-h) - k*h *(1-h);
}

[numthreads(10,1,1)]
void ComputePlanetHeight (uint id : SV_DispatchThreadID)
{
    // TODO: insert actual code here!
    if(id>=numVertices){return;}
    float3 vertexPos = vertices[id];
    //heights[id] = 1+(sin(vertexPos.y*testValue)*0.05);
    heights[id] = planetRadius;
    for(int i=0;i<numCraters;i++){
        if(length(vertexPos - craterCentres[i]) > craterRadii[i]*(1+rimWidth)){continue;}
        float x = length(vertexPos - craterCentres[i]);
        float cavity = craterRadii[i] - (x * x);
        if(cavity>0){
            //cavity = SmoothMin(cavity, craterDepth[i]*planetRadius, smoothness);
            cavity = min(cavity, craterDepth[i]*planetRadius);
            float rim = rimHeight*(craterRadii[i] - (x - (1+rimWidth)*craterRadii[i])*(x - (1+rimWidth)*craterRadii[i]));
            //cavity = SmoothMax(cavity, rim, smoothness);
            cavity = max(cavity, rim);
            heights[id] -= cavity;
        }
    }
}


